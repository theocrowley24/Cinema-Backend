use std::sync::Mutex;
use std::task::{Context, Poll};

use actix_service::{Service, Transform};
use actix_web::{Error, HttpResponse, web};
use actix_web::dev::{ServiceRequest, ServiceResponse};
use futures::future::{Either, ok, Ready};
use jsonwebtoken::{Algorithm, decode, DecodingKey, Validation};

use crate::AppState;
use crate::claims::user;

/*
 * This middleware is for protecting routes which require the user to be logged in.
 * It checks for the existence of an 'Authorization' header and the validity of the
 * JWT token supplied in this header.
 */

pub struct CheckLogin {
    pub state: web::Data<Mutex<AppState>>
}

impl<S, B> Transform<S> for CheckLogin
    where
        S: Service<Request=ServiceRequest, Response=ServiceResponse<B>, Error=Error>,
        S::Future: 'static,
{
    type Request = ServiceRequest;
    type Response = ServiceResponse<B>;
    type Error = Error;
    type Transform = CheckLoginMiddleware<S>;
    type InitError = ();
    type Future = Ready<Result<Self::Transform, Self::InitError>>;

    fn new_transform(&self, service: S) -> Self::Future {
        ok(CheckLoginMiddleware { service, state: self.state.clone() })
    }
}

pub struct CheckLoginMiddleware<S> {
    service: S,
    pub state: web::Data<Mutex<AppState>>,
}

impl<S, B> Service for CheckLoginMiddleware<S>
    where
        S: Service<Request=ServiceRequest, Response=ServiceResponse<B>, Error=Error>,
        S::Future: 'static,
{
    type Request = ServiceRequest;
    type Response = ServiceResponse<B>;
    type Error = Error;
    type Future = Either<S::Future, Ready<Result<Self::Response, Self::Error>>>;

    fn poll_ready(&mut self, cx: &mut Context) -> Poll<Result<(), Self::Error>> {
        self.service.poll_ready(cx)
    }

    fn call(&mut self, req: ServiceRequest) -> Self::Future {
        // Authorization is done via a JWT token generated by the /auth/login POST endpoint
        // If the user does not supply one they are denied by default
        let auth_header = req.headers().get("Authorization");
        let auth_header = match auth_header {
            Some(v) => v,
            None => {
                return Either::Right(ok(req.into_response(
                    HttpResponse::Unauthorized()
                        .finish()
                        .into_body(),
                )));
            }
        };

        // Get the value of the header
        let token = &auth_header.to_str();
        let token = match token {
            Ok(v) => v,
            Err(_) => {
                return Either::Right(ok(req.into_response(
                    HttpResponse::Unauthorized()
                        .finish()
                        .into_body(),
                )));
            }
        };

        // Authorization header starts with 'Bearer ' so we ignore the first 7 characters
        let token = &token[7..token.len()];
        let valid = decode::<user::UserClaim>(&token, &DecodingKey::from_secret("secret".as_ref()), &Validation::new(Algorithm::default()));

        return match valid {
            Ok(token) => {
                let mut my_state = self.state.lock().unwrap();
                my_state.user = Some(token.claims);

                Either::Left(self.service.call(req))
            }
            Err(_) => {
                Either::Right(ok(req.into_response(
                    HttpResponse::Unauthorized()
                        .finish()
                        .into_body(),
                )))
            }
        };
    }
}